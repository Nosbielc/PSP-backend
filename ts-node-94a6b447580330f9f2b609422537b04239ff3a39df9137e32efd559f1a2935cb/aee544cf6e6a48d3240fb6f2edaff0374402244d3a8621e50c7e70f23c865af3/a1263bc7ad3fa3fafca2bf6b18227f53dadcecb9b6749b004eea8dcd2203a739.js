"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const express = require("express");
const morgan = require("morgan");
const bodyParser = require("body-parser");
const expressValidator = require("express-validator");
const path = require("path");
const SocketUtil_1 = require("./util/SocketUtil");
const cors = require("cors");
const FactoryDB_1 = require("./util/FactoryDB");
// MÃ³dulos
const PSPRest_1 = require("./app/controller/PSPRest");
const TransactionRest_1 = require("./app/controller/TransactionRest");
class App {
    constructor() {
        this.exp = express(); //Criando servidor do Express
        this.server = SocketUtil_1.default.getServerSocketIo(this.exp);
        this.factoryDB = new FactoryDB_1.FactoryDB();
        this.middlewares();
        this.initRoutes();
    }
    createConnection(onConnected, onError) {
        this.factoryDB.createConnection(onConnected, onError);
    }
    updateTable(onUpate, onError) {
        this.factoryDB.updateTable(onUpate, onError);
    }
    closeConnection(onClose) {
        this.factoryDB.closeConnection(onClose);
    }
    middlewares() {
        this.exp.use(morgan("dev"));
        this.exp.use(bodyParser.json());
        this.exp.use(bodyParser.urlencoded({ extended: true }));
        this.exp.use(expressValidator());
        this.exp.use(express.static(path.join(__dirname, "public")));
        this.exp.use(cors());
    }
    initRoutes() {
        PSPRest_1.default.setRoutes(this.exp);
        TransactionRest_1.default.setRoutes(this.exp);
    }
    getSequelize() {
        return this.factoryDB.getSequelize();
    }
}
exports.default = new App();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL3Zhci93d3cvUFNQLWJhY2tlbmQvc3JjL2FwcC50cyIsInNvdXJjZXMiOlsiL3Zhci93d3cvUFNQLWJhY2tlbmQvc3JjL2FwcC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUNBLG1DQUFtQztBQUVuQyxpQ0FBaUM7QUFDakMsMENBQTBDO0FBQzFDLHNEQUFzRDtBQUN0RCw2QkFBNkI7QUFDN0Isa0RBQTJDO0FBQzNDLDZCQUE2QjtBQUM3QixnREFBNkM7QUFFN0MsVUFBVTtBQUNWLHNEQUErQztBQUMvQyxzRUFBK0Q7QUFFL0Q7SUFRSTtRQUNJLElBQUksQ0FBQyxHQUFHLEdBQUcsT0FBTyxFQUFFLENBQUMsQ0FBQSw2QkFBNkI7UUFDbEQsSUFBSSxDQUFDLE1BQU0sR0FBRyxvQkFBVSxDQUFDLGlCQUFpQixDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNyRCxJQUFJLENBQUMsU0FBUyxHQUFHLElBQUkscUJBQVMsRUFBRSxDQUFDO1FBQ2pDLElBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQztRQUNuQixJQUFJLENBQUMsVUFBVSxFQUFFLENBQUM7SUFDdEIsQ0FBQztJQUVNLGdCQUFnQixDQUFDLFdBQXFCLEVBQUUsT0FBaUI7UUFDN0QsSUFBSSxDQUFDLFNBQVMsQ0FBQyxnQkFBZ0IsQ0FBQyxXQUFXLEVBQUUsT0FBTyxDQUFDLENBQUM7SUFDekQsQ0FBQztJQUVNLFdBQVcsQ0FBQyxPQUFpQixFQUFFLE9BQWlCO1FBQ25ELElBQUksQ0FBQyxTQUFTLENBQUMsV0FBVyxDQUFDLE9BQU8sRUFBRSxPQUFPLENBQUMsQ0FBQztJQUNqRCxDQUFDO0lBRU0sZUFBZSxDQUFDLE9BQU87UUFDMUIsSUFBSSxDQUFDLFNBQVMsQ0FBQyxlQUFlLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDNUMsQ0FBQztJQUVPLFdBQVc7UUFDZixJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztRQUM1QixJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQztRQUNoQyxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsVUFBVSxDQUFDLEVBQUMsUUFBUSxFQUFFLElBQUksRUFBQyxDQUFDLENBQUMsQ0FBQztRQUN0RCxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDLENBQUM7UUFDakMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDN0QsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQztJQUN6QixDQUFDO0lBRU8sVUFBVTtRQUNkLGlCQUFPLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUM1Qix5QkFBZSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDeEMsQ0FBQztJQUVELFlBQVk7UUFDUixNQUFNLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxZQUFZLEVBQUUsQ0FBQztJQUN6QyxDQUFDO0NBQ0o7QUFFRCxrQkFBZSxJQUFJLEdBQUcsRUFBRSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgU2VxdWVsaXplIH0gZnJvbSAnc2VxdWVsaXplLXR5cGVzY3JpcHQnO1xuaW1wb3J0ICogYXMgZXhwcmVzcyBmcm9tIFwiZXhwcmVzc1wiO1xuaW1wb3J0ICogYXMgaHR0cCBmcm9tIFwiaHR0cFwiO1xuaW1wb3J0ICogYXMgbW9yZ2FuIGZyb20gXCJtb3JnYW5cIjtcbmltcG9ydCAqIGFzIGJvZHlQYXJzZXIgZnJvbSBcImJvZHktcGFyc2VyXCI7XG5pbXBvcnQgKiBhcyBleHByZXNzVmFsaWRhdG9yIGZyb20gJ2V4cHJlc3MtdmFsaWRhdG9yJztcbmltcG9ydCAqIGFzIHBhdGggZnJvbSBcInBhdGhcIjtcbmltcG9ydCBTb2NrZXRVdGlsIGZyb20gXCIuL3V0aWwvU29ja2V0VXRpbFwiO1xuaW1wb3J0ICogYXMgY29ycyBmcm9tIFwiY29yc1wiO1xuaW1wb3J0IHsgRmFjdG9yeURCIH0gZnJvbSBcIi4vdXRpbC9GYWN0b3J5REJcIjtcblxuLy8gTcOzZHVsb3NcbmltcG9ydCBQU1BSZXN0IGZyb20gXCIuL2FwcC9jb250cm9sbGVyL1BTUFJlc3RcIjtcbmltcG9ydCBUcmFuc2FjdGlvblJlc3QgZnJvbSBcIi4vYXBwL2NvbnRyb2xsZXIvVHJhbnNhY3Rpb25SZXN0XCI7XG5cbmNsYXNzIEFwcCB7XG4gICAgcHVibGljIGV4cDogZXhwcmVzcy5BcHBsaWNhdGlvbjtcbiAgICBwdWJsaWMgc2VydmVyOiBodHRwLlNlcnZlcjtcbiAgICBwcml2YXRlIG1vcmdhbjogbW9yZ2FuLk1vcmdhbjtcbiAgICBwcml2YXRlIGJvZHlQYXJzZXI7IFxuICAgIHByaXZhdGUgY29ycztcbiAgICBwcml2YXRlIGZhY3RvcnlEQjogRmFjdG9yeURCO1xuICAgIFxuICAgIGNvbnN0cnVjdG9yKCl7XG4gICAgICAgIHRoaXMuZXhwID0gZXhwcmVzcygpOy8vQ3JpYW5kbyBzZXJ2aWRvciBkbyBFeHByZXNzXG4gICAgICAgIHRoaXMuc2VydmVyID0gU29ja2V0VXRpbC5nZXRTZXJ2ZXJTb2NrZXRJbyh0aGlzLmV4cCk7XG4gICAgICAgIHRoaXMuZmFjdG9yeURCID0gbmV3IEZhY3RvcnlEQigpO1xuICAgICAgICB0aGlzLm1pZGRsZXdhcmVzKCk7XG4gICAgICAgIHRoaXMuaW5pdFJvdXRlcygpO1xuICAgIH1cbiAgICBcbiAgICBwdWJsaWMgY3JlYXRlQ29ubmVjdGlvbihvbkNvbm5lY3RlZDogRnVuY3Rpb24sIG9uRXJyb3I6IEZ1bmN0aW9uKXtcbiAgICAgICB0aGlzLmZhY3RvcnlEQi5jcmVhdGVDb25uZWN0aW9uKG9uQ29ubmVjdGVkLCBvbkVycm9yKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgdXBkYXRlVGFibGUob25VcGF0ZTogRnVuY3Rpb24sIG9uRXJyb3I6IEZ1bmN0aW9uKXtcbiAgICAgICAgdGhpcy5mYWN0b3J5REIudXBkYXRlVGFibGUob25VcGF0ZSwgb25FcnJvcik7XG4gICAgfVxuICAgIFxuICAgIHB1YmxpYyBjbG9zZUNvbm5lY3Rpb24ob25DbG9zZSl7XG4gICAgICAgIHRoaXMuZmFjdG9yeURCLmNsb3NlQ29ubmVjdGlvbihvbkNsb3NlKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIG1pZGRsZXdhcmVzKCl7XG4gICAgICAgIHRoaXMuZXhwLnVzZShtb3JnYW4oXCJkZXZcIikpO1xuICAgICAgICB0aGlzLmV4cC51c2UoYm9keVBhcnNlci5qc29uKCkpO1xuICAgICAgICB0aGlzLmV4cC51c2UoYm9keVBhcnNlci51cmxlbmNvZGVkKHtleHRlbmRlZDogdHJ1ZX0pKTtcbiAgICAgICAgdGhpcy5leHAudXNlKGV4cHJlc3NWYWxpZGF0b3IoKSk7XG4gICAgICAgIHRoaXMuZXhwLnVzZShleHByZXNzLnN0YXRpYyhwYXRoLmpvaW4oX19kaXJuYW1lLCBcInB1YmxpY1wiKSkpO1xuICAgICAgICB0aGlzLmV4cC51c2UoY29ycygpKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGluaXRSb3V0ZXMoKXtcbiAgICAgICAgUFNQUmVzdC5zZXRSb3V0ZXModGhpcy5leHApO1xuICAgICAgICBUcmFuc2FjdGlvblJlc3Quc2V0Um91dGVzKHRoaXMuZXhwKTtcbiAgICB9XG5cbiAgICBnZXRTZXF1ZWxpemUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmZhY3RvcnlEQi5nZXRTZXF1ZWxpemUoKTtcbiAgICB9XG59IFxuXG5leHBvcnQgZGVmYXVsdCBuZXcgQXBwKCk7XG4iXX0=