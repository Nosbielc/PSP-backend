"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const sequelize_typescript_1 = require("sequelize-typescript");
const TransactionModel_1 = require("../app/model/TransactionModel");
const PayableModel_1 = require("../app/model/PayableModel");
const ClientModel_1 = require("../app/model/ClientModel");
class FactoryDB {
    constructor() {
        //Dados conexão Local.
        this.host = "172.17.0.3";
        this.port = 3306;
        this.database = "psp";
        this.user = "psp";
        this.password = "psp";
        this.dialect = "mysql";
        this.typeSync = "alter"; //Acredito que não funciona legal
    }
    createConnection(onConnected, onError) {
        let nodeEnv = process.env.NODE_ENV;
        console.log("Node_ENV: " + nodeEnv);
        if (!nodeEnv) {
            console.log("---------------Ambiente Local");
        }
        else if (nodeEnv.indexOf("test") > -1) {
            console.log("---------------Ambiente de Teste");
        }
        else if (nodeEnv.indexOf("development") > -1) {
            console.log("---------------Ambiente desenvolvimento!");
        }
        else if (nodeEnv.indexOf("production") > -1) {
            console.log("---------------Ambiente de produção!");
            this.host = "mysql785.umbler.com";
            this.port = 3310;
            this.password = "W[5Jf7?yujD5,";
        }
        this.sequelize = new sequelize_typescript_1.Sequelize({
            host: this.host,
            port: this.port,
            database: this.database,
            dialect: this.dialect,
            username: this.user,
            password: this.password,
            pool: {
                max: 25,
                min: 0,
                acquire: 30000,
                idle: 10000
            },
            logging: true
        });
        //Adicionando os modelos que serão espelhados como tabelas no banco de dados.
        this.sequelize.addModels([
            TransactionModel_1.Transaction,
            PayableModel_1.Payable,
            ClientModel_1.Client
        ]);
        this.sequelize.authenticate().then(onConnected).catch(onError);
    }
    updateTable(onUpdate, onError) {
        if (this.sequelize) {
            this.sequelize.sync({ force: true, alter: true }).then(onUpdate).catch(onError);
        }
    }
    getSequelize() {
        return this.sequelize;
    }
    closeConnection(onClose) {
    }
}
exports.FactoryDB = FactoryDB;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL3Zhci93d3cvUFNQLWJhY2tlbmQvc3JjL3V0aWwvRmFjdG9yeURCLnRzIiwic291cmNlcyI6WyIvdmFyL3d3dy9QU1AtYmFja2VuZC9zcmMvdXRpbC9GYWN0b3J5REIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSwrREFBaUQ7QUFDakQsb0VBQTBEO0FBQzFELDREQUFrRDtBQUNsRCwwREFBZ0Q7QUFFaEQ7SUFhSTtRQVhBLHNCQUFzQjtRQUNkLFNBQUksR0FBRyxZQUFZLENBQUM7UUFDcEIsU0FBSSxHQUFHLElBQUksQ0FBQztRQUNaLGFBQVEsR0FBRyxLQUFLLENBQUM7UUFDakIsU0FBSSxHQUFJLEtBQUssQ0FBQztRQUNkLGFBQVEsR0FBRyxLQUFLLENBQUM7UUFDakIsWUFBTyxHQUFHLE9BQU8sQ0FBQztRQUNsQixhQUFRLEdBQUcsT0FBTyxDQUFDLENBQUMsaUNBQWlDO0lBSzdELENBQUM7SUFFRCxnQkFBZ0IsQ0FBQyxXQUFnQixFQUFFLE9BQVk7UUFDM0MsSUFBSSxPQUFPLEdBQVUsT0FBTyxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUM7UUFDMUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxZQUFZLEdBQUcsT0FBTyxDQUFDLENBQUM7UUFDcEMsRUFBRSxDQUFBLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQSxDQUFDO1lBQ1QsT0FBTyxDQUFDLEdBQUcsQ0FBQywrQkFBK0IsQ0FBQyxDQUFDO1FBQ2pELENBQUM7UUFBQSxJQUFJLENBQUMsRUFBRSxDQUFBLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFBLENBQUM7WUFDbkMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxrQ0FBa0MsQ0FBQyxDQUFDO1FBQ3BELENBQUM7UUFBQSxJQUFJLENBQUMsRUFBRSxDQUFBLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxhQUFhLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFBLENBQUM7WUFDMUMsT0FBTyxDQUFDLEdBQUcsQ0FBQywwQ0FBMEMsQ0FBQyxDQUFDO1FBQzVELENBQUM7UUFBQSxJQUFJLENBQUMsRUFBRSxDQUFBLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxZQUFZLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFBLENBQUM7WUFDekMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxzQ0FBc0MsQ0FBQyxDQUFDO1lBQ3BELElBQUksQ0FBQyxJQUFJLEdBQUcscUJBQXFCLENBQUM7WUFDbEMsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7WUFDakIsSUFBSSxDQUFDLFFBQVEsR0FBRyxlQUFlLENBQUE7UUFDbkMsQ0FBQztRQUNELElBQUksQ0FBQyxTQUFTLEdBQUksSUFBSSxnQ0FBUyxDQUFDO1lBQzVCLElBQUksRUFBRSxJQUFJLENBQUMsSUFBSTtZQUNmLElBQUksRUFBRSxJQUFJLENBQUMsSUFBSTtZQUNmLFFBQVEsRUFBRSxJQUFJLENBQUMsUUFBUTtZQUN2QixPQUFPLEVBQUUsSUFBSSxDQUFDLE9BQU87WUFDckIsUUFBUSxFQUFFLElBQUksQ0FBQyxJQUFJO1lBQ25CLFFBQVEsRUFBRSxJQUFJLENBQUMsUUFBUTtZQUN2QixJQUFJLEVBQUU7Z0JBQ0YsR0FBRyxFQUFFLEVBQUU7Z0JBQ1AsR0FBRyxFQUFFLENBQUM7Z0JBQ04sT0FBTyxFQUFFLEtBQUs7Z0JBQ2QsSUFBSSxFQUFFLEtBQUs7YUFDZDtZQUNELE9BQU8sRUFBRSxJQUFJO1NBQ2hCLENBQUMsQ0FBQztRQUNILDZFQUE2RTtRQUM3RSxJQUFJLENBQUMsU0FBUyxDQUFDLFNBQVMsQ0FBQztZQUNyQiw4QkFBVztZQUNYLHNCQUFPO1lBQ1Asb0JBQU07U0FDVCxDQUFDLENBQUM7UUFFSCxJQUFJLENBQUMsU0FBUyxDQUFDLFlBQVksRUFBRSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUM7SUFFbkUsQ0FBQztJQUVELFdBQVcsQ0FBQyxRQUFhLEVBQUUsT0FBWTtRQUNuQyxFQUFFLENBQUEsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUEsQ0FBQztZQUNmLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLEVBQUMsS0FBSyxFQUFFLElBQUksRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQ25GLENBQUM7SUFDTCxDQUFDO0lBRUQsWUFBWTtRQUNSLE1BQU0sQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDO0lBQzFCLENBQUM7SUFFRCxlQUFlLENBQUMsT0FBWTtJQUU1QixDQUFDO0NBQ0o7QUF0RUQsOEJBc0VDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgU2VxdWVsaXplIH0gZnJvbSBcInNlcXVlbGl6ZS10eXBlc2NyaXB0XCI7XG5pbXBvcnQge1RyYW5zYWN0aW9ufSBmcm9tIFwiLi4vYXBwL21vZGVsL1RyYW5zYWN0aW9uTW9kZWxcIjtcbmltcG9ydCB7UGF5YWJsZX0gZnJvbSBcIi4uL2FwcC9tb2RlbC9QYXlhYmxlTW9kZWxcIjtcbmltcG9ydCB7Q2xpZW50fSBmcm9tIFwiLi4vYXBwL21vZGVsL0NsaWVudE1vZGVsXCI7XG5cbmV4cG9ydCBjbGFzcyBGYWN0b3J5REJ7XG4gICAgXG4gICAgLy9EYWRvcyBjb25leMOjbyBMb2NhbC5cbiAgICBwcml2YXRlIGhvc3QgPSBcIjE3Mi4xNy4wLjNcIjtcbiAgICBwcml2YXRlIHBvcnQgPSAzMzA2O1xuICAgIHByaXZhdGUgZGF0YWJhc2UgPSBcInBzcFwiO1xuICAgIHByaXZhdGUgdXNlciAgPSBcInBzcFwiO1xuICAgIHByaXZhdGUgcGFzc3dvcmQgPSBcInBzcFwiO1xuICAgIHByaXZhdGUgZGlhbGVjdCA9IFwibXlzcWxcIjtcbiAgICBwcml2YXRlIHR5cGVTeW5jID0gXCJhbHRlclwiOyAvL0FjcmVkaXRvIHF1ZSBuw6NvIGZ1bmNpb25hIGxlZ2FsXG5cbiAgICBwcml2YXRlIHNlcXVlbGl6ZTogU2VxdWVsaXplO1xuXG4gICAgY29uc3RydWN0b3IoKXtcbiAgICB9XG5cbiAgICBjcmVhdGVDb25uZWN0aW9uKG9uQ29ubmVjdGVkOiBhbnksIG9uRXJyb3I6IGFueSl7XG4gICAgICAgIGxldCBub2RlRW52OnN0cmluZyA9IHByb2Nlc3MuZW52Lk5PREVfRU5WO1xuICAgICAgICBjb25zb2xlLmxvZyhcIk5vZGVfRU5WOiBcIiArIG5vZGVFbnYpO1xuICAgICAgICBpZighbm9kZUVudil7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcIi0tLS0tLS0tLS0tLS0tLUFtYmllbnRlIExvY2FsXCIpO1xuICAgICAgICB9ZWxzZSBpZihub2RlRW52LmluZGV4T2YoXCJ0ZXN0XCIpID4gLTEpe1xuICAgICAgICAgICAgY29uc29sZS5sb2coXCItLS0tLS0tLS0tLS0tLS1BbWJpZW50ZSBkZSBUZXN0ZVwiKTtcbiAgICAgICAgfWVsc2UgaWYobm9kZUVudi5pbmRleE9mKFwiZGV2ZWxvcG1lbnRcIikgPiAtMSl7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcIi0tLS0tLS0tLS0tLS0tLUFtYmllbnRlIGRlc2Vudm9sdmltZW50byFcIik7XG4gICAgICAgIH1lbHNlIGlmKG5vZGVFbnYuaW5kZXhPZihcInByb2R1Y3Rpb25cIikgPiAtMSl7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcIi0tLS0tLS0tLS0tLS0tLUFtYmllbnRlIGRlIHByb2R1w6fDo28hXCIpO1xuICAgICAgICAgICAgdGhpcy5ob3N0ID0gXCJteXNxbDc4NS51bWJsZXIuY29tXCI7XG4gICAgICAgICAgICB0aGlzLnBvcnQgPSAzMzEwO1xuICAgICAgICAgICAgdGhpcy5wYXNzd29yZCA9IFwiV1s1SmY3P3l1akQ1LFwiXG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5zZXF1ZWxpemUgPSAgbmV3IFNlcXVlbGl6ZSh7XG4gICAgICAgICAgICBob3N0OiB0aGlzLmhvc3QsXG4gICAgICAgICAgICBwb3J0OiB0aGlzLnBvcnQsXG4gICAgICAgICAgICBkYXRhYmFzZTogdGhpcy5kYXRhYmFzZSxcbiAgICAgICAgICAgIGRpYWxlY3Q6IHRoaXMuZGlhbGVjdCxcbiAgICAgICAgICAgIHVzZXJuYW1lOiB0aGlzLnVzZXIsXG4gICAgICAgICAgICBwYXNzd29yZDogdGhpcy5wYXNzd29yZCxcbiAgICAgICAgICAgIHBvb2w6IHtcbiAgICAgICAgICAgICAgICBtYXg6IDI1LFxuICAgICAgICAgICAgICAgIG1pbjogMCxcbiAgICAgICAgICAgICAgICBhY3F1aXJlOiAzMDAwMCxcbiAgICAgICAgICAgICAgICBpZGxlOiAxMDAwMFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGxvZ2dpbmc6IHRydWVcbiAgICAgICAgfSk7XG4gICAgICAgIC8vQWRpY2lvbmFuZG8gb3MgbW9kZWxvcyBxdWUgc2Vyw6NvIGVzcGVsaGFkb3MgY29tbyB0YWJlbGFzIG5vIGJhbmNvIGRlIGRhZG9zLlxuICAgICAgICB0aGlzLnNlcXVlbGl6ZS5hZGRNb2RlbHMoW1xuICAgICAgICAgICAgVHJhbnNhY3Rpb24sXG4gICAgICAgICAgICBQYXlhYmxlLFxuICAgICAgICAgICAgQ2xpZW50XG4gICAgICAgIF0pO1xuICAgICAgICBcbiAgICAgICAgdGhpcy5zZXF1ZWxpemUuYXV0aGVudGljYXRlKCkudGhlbihvbkNvbm5lY3RlZCkuY2F0Y2gob25FcnJvcik7XG5cbiAgICB9XG5cbiAgICB1cGRhdGVUYWJsZShvblVwZGF0ZTogYW55LCBvbkVycm9yOiBhbnkpe1xuICAgICAgICBpZih0aGlzLnNlcXVlbGl6ZSl7XG4gICAgICAgICAgICB0aGlzLnNlcXVlbGl6ZS5zeW5jKHtmb3JjZTogdHJ1ZSwgYWx0ZXI6IHRydWUgfSkudGhlbihvblVwZGF0ZSkuY2F0Y2gob25FcnJvcik7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBnZXRTZXF1ZWxpemUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnNlcXVlbGl6ZTtcbiAgICB9XG5cbiAgICBjbG9zZUNvbm5lY3Rpb24ob25DbG9zZTogYW55KXtcbiAgICAgICAgXG4gICAgfVxufVxuIl19