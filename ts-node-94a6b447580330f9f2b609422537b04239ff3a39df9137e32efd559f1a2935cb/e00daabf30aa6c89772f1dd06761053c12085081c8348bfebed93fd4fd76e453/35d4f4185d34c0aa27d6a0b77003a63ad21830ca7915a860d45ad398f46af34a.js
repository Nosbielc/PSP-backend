"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const express = require("express");
const morgan = require("morgan");
const bodyParser = require("body-parser");
const expressValidator = require("express-validator");
const path = require("path");
const SocketUtil_1 = require("./util/SocketUtil");
const cors = require("cors");
const FactoryDB_1 = require("./util/FactoryDB");
// MÃ³dulos
const PSPRest_1 = require("./app/controller/PSPRest");
const TransactionRest_1 = require("./app/controller/TransactionRest");
const PayableRest_1 = require("./app/controller/PayableRest");
class App {
    constructor() {
        this.exp = express(); //Criando servidor do Express
        this.server = SocketUtil_1.default.getServerSocketIo(this.exp);
        this.factoryDB = new FactoryDB_1.FactoryDB();
        this.middlewares();
        this.initRoutes();
    }
    createConnection(onConnected, onError) {
        this.factoryDB.createConnection(onConnected, onError);
    }
    updateTable(onUpate, onError) {
        this.factoryDB.updateTable(onUpate, onError);
    }
    closeConnection(onClose) {
        this.factoryDB.closeConnection(onClose);
    }
    middlewares() {
        this.exp.use(morgan("dev"));
        this.exp.use(bodyParser.json());
        this.exp.use(bodyParser.urlencoded({ extended: true }));
        this.exp.use(expressValidator());
        this.exp.use(express.static(path.join(__dirname, "public")));
        this.exp.use(cors());
    }
    initRoutes() {
        PSPRest_1.default.setRoutes(this.exp);
        TransactionRest_1.default.setRoutes(this.exp);
        PayableRest_1.default.setRoutes(this.exp);
    }
    getSequelize() {
        return this.factoryDB.getSequelize();
    }
}
exports.default = new App();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL3Zhci93d3cvUFNQLWJhY2tlbmQvc3JjL2FwcC50cyIsInNvdXJjZXMiOlsiL3Zhci93d3cvUFNQLWJhY2tlbmQvc3JjL2FwcC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUNBLG1DQUFtQztBQUVuQyxpQ0FBaUM7QUFDakMsMENBQTBDO0FBQzFDLHNEQUFzRDtBQUN0RCw2QkFBNkI7QUFDN0Isa0RBQTJDO0FBQzNDLDZCQUE2QjtBQUM3QixnREFBNkM7QUFFN0MsVUFBVTtBQUNWLHNEQUErQztBQUMvQyxzRUFBK0Q7QUFDL0QsOERBQXVEO0FBRXZEO0lBUUk7UUFDSSxJQUFJLENBQUMsR0FBRyxHQUFHLE9BQU8sRUFBRSxDQUFDLENBQUEsNkJBQTZCO1FBQ2xELElBQUksQ0FBQyxNQUFNLEdBQUcsb0JBQVUsQ0FBQyxpQkFBaUIsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDckQsSUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLHFCQUFTLEVBQUUsQ0FBQztRQUNqQyxJQUFJLENBQUMsV0FBVyxFQUFFLENBQUM7UUFDbkIsSUFBSSxDQUFDLFVBQVUsRUFBRSxDQUFDO0lBQ3RCLENBQUM7SUFFTSxnQkFBZ0IsQ0FBQyxXQUFxQixFQUFFLE9BQWlCO1FBQzdELElBQUksQ0FBQyxTQUFTLENBQUMsZ0JBQWdCLENBQUMsV0FBVyxFQUFFLE9BQU8sQ0FBQyxDQUFDO0lBQ3pELENBQUM7SUFFTSxXQUFXLENBQUMsT0FBaUIsRUFBRSxPQUFpQjtRQUNuRCxJQUFJLENBQUMsU0FBUyxDQUFDLFdBQVcsQ0FBQyxPQUFPLEVBQUUsT0FBTyxDQUFDLENBQUM7SUFDakQsQ0FBQztJQUVNLGVBQWUsQ0FBQyxPQUFPO1FBQzFCLElBQUksQ0FBQyxTQUFTLENBQUMsZUFBZSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQzVDLENBQUM7SUFFTyxXQUFXO1FBQ2YsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7UUFDNUIsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLElBQUksRUFBRSxDQUFDLENBQUM7UUFDaEMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLFVBQVUsQ0FBQyxFQUFDLFFBQVEsRUFBRSxJQUFJLEVBQUMsQ0FBQyxDQUFDLENBQUM7UUFDdEQsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQyxDQUFDO1FBQ2pDLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQzdELElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLElBQUksRUFBRSxDQUFDLENBQUM7SUFDekIsQ0FBQztJQUVPLFVBQVU7UUFDZCxpQkFBTyxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDNUIseUJBQWUsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ3BDLHFCQUFXLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUNwQyxDQUFDO0lBRUQsWUFBWTtRQUNSLE1BQU0sQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLFlBQVksRUFBRSxDQUFDO0lBQ3pDLENBQUM7Q0FDSjtBQUVELGtCQUFlLElBQUksR0FBRyxFQUFFLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBTZXF1ZWxpemUgfSBmcm9tICdzZXF1ZWxpemUtdHlwZXNjcmlwdCc7XG5pbXBvcnQgKiBhcyBleHByZXNzIGZyb20gXCJleHByZXNzXCI7XG5pbXBvcnQgKiBhcyBodHRwIGZyb20gXCJodHRwXCI7XG5pbXBvcnQgKiBhcyBtb3JnYW4gZnJvbSBcIm1vcmdhblwiO1xuaW1wb3J0ICogYXMgYm9keVBhcnNlciBmcm9tIFwiYm9keS1wYXJzZXJcIjtcbmltcG9ydCAqIGFzIGV4cHJlc3NWYWxpZGF0b3IgZnJvbSAnZXhwcmVzcy12YWxpZGF0b3InO1xuaW1wb3J0ICogYXMgcGF0aCBmcm9tIFwicGF0aFwiO1xuaW1wb3J0IFNvY2tldFV0aWwgZnJvbSBcIi4vdXRpbC9Tb2NrZXRVdGlsXCI7XG5pbXBvcnQgKiBhcyBjb3JzIGZyb20gXCJjb3JzXCI7XG5pbXBvcnQgeyBGYWN0b3J5REIgfSBmcm9tIFwiLi91dGlsL0ZhY3RvcnlEQlwiO1xuXG4vLyBNw7NkdWxvc1xuaW1wb3J0IFBTUFJlc3QgZnJvbSBcIi4vYXBwL2NvbnRyb2xsZXIvUFNQUmVzdFwiO1xuaW1wb3J0IFRyYW5zYWN0aW9uUmVzdCBmcm9tIFwiLi9hcHAvY29udHJvbGxlci9UcmFuc2FjdGlvblJlc3RcIjtcbmltcG9ydCBQYXlhYmxlUmVzdCBmcm9tIFwiLi9hcHAvY29udHJvbGxlci9QYXlhYmxlUmVzdFwiO1xuXG5jbGFzcyBBcHAge1xuICAgIHB1YmxpYyBleHA6IGV4cHJlc3MuQXBwbGljYXRpb247XG4gICAgcHVibGljIHNlcnZlcjogaHR0cC5TZXJ2ZXI7XG4gICAgcHJpdmF0ZSBtb3JnYW46IG1vcmdhbi5Nb3JnYW47XG4gICAgcHJpdmF0ZSBib2R5UGFyc2VyOyBcbiAgICBwcml2YXRlIGNvcnM7XG4gICAgcHJpdmF0ZSBmYWN0b3J5REI6IEZhY3RvcnlEQjtcbiAgICBcbiAgICBjb25zdHJ1Y3Rvcigpe1xuICAgICAgICB0aGlzLmV4cCA9IGV4cHJlc3MoKTsvL0NyaWFuZG8gc2Vydmlkb3IgZG8gRXhwcmVzc1xuICAgICAgICB0aGlzLnNlcnZlciA9IFNvY2tldFV0aWwuZ2V0U2VydmVyU29ja2V0SW8odGhpcy5leHApO1xuICAgICAgICB0aGlzLmZhY3RvcnlEQiA9IG5ldyBGYWN0b3J5REIoKTtcbiAgICAgICAgdGhpcy5taWRkbGV3YXJlcygpO1xuICAgICAgICB0aGlzLmluaXRSb3V0ZXMoKTtcbiAgICB9XG4gICAgXG4gICAgcHVibGljIGNyZWF0ZUNvbm5lY3Rpb24ob25Db25uZWN0ZWQ6IEZ1bmN0aW9uLCBvbkVycm9yOiBGdW5jdGlvbil7XG4gICAgICAgdGhpcy5mYWN0b3J5REIuY3JlYXRlQ29ubmVjdGlvbihvbkNvbm5lY3RlZCwgb25FcnJvcik7XG4gICAgfVxuXG4gICAgcHVibGljIHVwZGF0ZVRhYmxlKG9uVXBhdGU6IEZ1bmN0aW9uLCBvbkVycm9yOiBGdW5jdGlvbil7XG4gICAgICAgIHRoaXMuZmFjdG9yeURCLnVwZGF0ZVRhYmxlKG9uVXBhdGUsIG9uRXJyb3IpO1xuICAgIH1cbiAgICBcbiAgICBwdWJsaWMgY2xvc2VDb25uZWN0aW9uKG9uQ2xvc2Upe1xuICAgICAgICB0aGlzLmZhY3RvcnlEQi5jbG9zZUNvbm5lY3Rpb24ob25DbG9zZSk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBtaWRkbGV3YXJlcygpe1xuICAgICAgICB0aGlzLmV4cC51c2UobW9yZ2FuKFwiZGV2XCIpKTtcbiAgICAgICAgdGhpcy5leHAudXNlKGJvZHlQYXJzZXIuanNvbigpKTtcbiAgICAgICAgdGhpcy5leHAudXNlKGJvZHlQYXJzZXIudXJsZW5jb2RlZCh7ZXh0ZW5kZWQ6IHRydWV9KSk7XG4gICAgICAgIHRoaXMuZXhwLnVzZShleHByZXNzVmFsaWRhdG9yKCkpO1xuICAgICAgICB0aGlzLmV4cC51c2UoZXhwcmVzcy5zdGF0aWMocGF0aC5qb2luKF9fZGlybmFtZSwgXCJwdWJsaWNcIikpKTtcbiAgICAgICAgdGhpcy5leHAudXNlKGNvcnMoKSk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBpbml0Um91dGVzKCl7XG4gICAgICAgIFBTUFJlc3Quc2V0Um91dGVzKHRoaXMuZXhwKTtcbiAgICAgICAgVHJhbnNhY3Rpb25SZXN0LnNldFJvdXRlcyh0aGlzLmV4cCk7XG4gICAgICAgIFBheWFibGVSZXN0LnNldFJvdXRlcyh0aGlzLmV4cCk7XG4gICAgfVxuXG4gICAgZ2V0U2VxdWVsaXplKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5mYWN0b3J5REIuZ2V0U2VxdWVsaXplKCk7XG4gICAgfVxufSBcblxuZXhwb3J0IGRlZmF1bHQgbmV3IEFwcCgpO1xuIl19