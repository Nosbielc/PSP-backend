"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const sequelize_typescript_1 = require("sequelize-typescript");
const TransactionModel_1 = require("../app/model/TransactionModel");
const PayableModel_1 = require("../app/model/PayableModel");
class FactoryDB {
    constructor() {
        //Dados conexão Local.
        this.host = "172.17.0.3";
        this.port = 3306;
        this.database = "psp";
        this.user = "psp";
        this.password = "psp";
        this.dialect = "mysql";
        this.typeSync = "alter"; //Acredito que não funciona legal
    }
    createConnection(onConnected, onError) {
        let nodeEnv = process.env.NODE_ENV;
        console.log("Node_ENV: " + nodeEnv);
        if (!nodeEnv) {
            console.log("---------------Ambiente Local");
        }
        else if (nodeEnv.indexOf("test") > -1) {
            console.log("---------------Ambiente de Teste");
        }
        else if (nodeEnv.indexOf("development") > -1) {
            console.log("---------------Ambiente desenvolvimento!");
        }
        else if (nodeEnv.indexOf("production") > -1) {
            console.log("---------------Ambiente de produção!");
            this.host = "mysql785.umbler.com";
            this.port = 3310;
            this.password = "W[5Jf7?yujD5,";
        }
        this.sequelize = new sequelize_typescript_1.Sequelize({
            host: this.host,
            port: this.port,
            database: this.database,
            dialect: this.dialect,
            username: this.user,
            password: this.password,
            pool: {
                max: 25,
                min: 0,
                acquire: 30000,
                idle: 10000
            },
            logging: true
        });
        //Adicionando os modelos que serão espelhados como tabelas no banco de dados.
        this.sequelize.addModels([
            TransactionModel_1.Transaction,
            PayableModel_1.Payable
        ]);
        this.sequelize.authenticate().then(onConnected).catch(onError);
    }
    updateTable(onUpdate, onError) {
        if (this.sequelize) {
            this.sequelize.sync({ force: true, alter: true }).then(onUpdate).catch(onError);
        }
    }
    getSequelize() {
        return this.sequelize;
    }
    closeConnection(onClose) {
    }
}
exports.FactoryDB = FactoryDB;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL3Zhci93d3cvUFNQLWJhY2tlbmQvc3JjL3V0aWwvRmFjdG9yeURCLnRzIiwic291cmNlcyI6WyIvdmFyL3d3dy9QU1AtYmFja2VuZC9zcmMvdXRpbC9GYWN0b3J5REIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSwrREFBaUQ7QUFDakQsb0VBQTBEO0FBQzFELDREQUFrRDtBQUVsRDtJQWFJO1FBWEEsc0JBQXNCO1FBQ2QsU0FBSSxHQUFHLFlBQVksQ0FBQztRQUNwQixTQUFJLEdBQUcsSUFBSSxDQUFDO1FBQ1osYUFBUSxHQUFHLEtBQUssQ0FBQztRQUNqQixTQUFJLEdBQUksS0FBSyxDQUFDO1FBQ2QsYUFBUSxHQUFHLEtBQUssQ0FBQztRQUNqQixZQUFPLEdBQUcsT0FBTyxDQUFDO1FBQ2xCLGFBQVEsR0FBRyxPQUFPLENBQUMsQ0FBQyxpQ0FBaUM7SUFLN0QsQ0FBQztJQUVELGdCQUFnQixDQUFDLFdBQWdCLEVBQUUsT0FBWTtRQUMzQyxJQUFJLE9BQU8sR0FBVSxPQUFPLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQztRQUMxQyxPQUFPLENBQUMsR0FBRyxDQUFDLFlBQVksR0FBRyxPQUFPLENBQUMsQ0FBQztRQUNwQyxFQUFFLENBQUEsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFBLENBQUM7WUFDVCxPQUFPLENBQUMsR0FBRyxDQUFDLCtCQUErQixDQUFDLENBQUM7UUFDakQsQ0FBQztRQUFBLElBQUksQ0FBQyxFQUFFLENBQUEsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUEsQ0FBQztZQUNuQyxPQUFPLENBQUMsR0FBRyxDQUFDLGtDQUFrQyxDQUFDLENBQUM7UUFDcEQsQ0FBQztRQUFBLElBQUksQ0FBQyxFQUFFLENBQUEsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLGFBQWEsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUEsQ0FBQztZQUMxQyxPQUFPLENBQUMsR0FBRyxDQUFDLDBDQUEwQyxDQUFDLENBQUM7UUFDNUQsQ0FBQztRQUFBLElBQUksQ0FBQyxFQUFFLENBQUEsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLFlBQVksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUEsQ0FBQztZQUN6QyxPQUFPLENBQUMsR0FBRyxDQUFDLHNDQUFzQyxDQUFDLENBQUM7WUFDcEQsSUFBSSxDQUFDLElBQUksR0FBRyxxQkFBcUIsQ0FBQztZQUNsQyxJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQztZQUNqQixJQUFJLENBQUMsUUFBUSxHQUFHLGVBQWUsQ0FBQTtRQUNuQyxDQUFDO1FBQ0QsSUFBSSxDQUFDLFNBQVMsR0FBSSxJQUFJLGdDQUFTLENBQUM7WUFDNUIsSUFBSSxFQUFFLElBQUksQ0FBQyxJQUFJO1lBQ2YsSUFBSSxFQUFFLElBQUksQ0FBQyxJQUFJO1lBQ2YsUUFBUSxFQUFFLElBQUksQ0FBQyxRQUFRO1lBQ3ZCLE9BQU8sRUFBRSxJQUFJLENBQUMsT0FBTztZQUNyQixRQUFRLEVBQUUsSUFBSSxDQUFDLElBQUk7WUFDbkIsUUFBUSxFQUFFLElBQUksQ0FBQyxRQUFRO1lBQ3ZCLElBQUksRUFBRTtnQkFDRixHQUFHLEVBQUUsRUFBRTtnQkFDUCxHQUFHLEVBQUUsQ0FBQztnQkFDTixPQUFPLEVBQUUsS0FBSztnQkFDZCxJQUFJLEVBQUUsS0FBSzthQUNkO1lBQ0QsT0FBTyxFQUFFLElBQUk7U0FDaEIsQ0FBQyxDQUFDO1FBQ0gsNkVBQTZFO1FBQzdFLElBQUksQ0FBQyxTQUFTLENBQUMsU0FBUyxDQUFDO1lBQ3JCLDhCQUFXO1lBQ1gsc0JBQU87U0FDVixDQUFDLENBQUM7UUFFSCxJQUFJLENBQUMsU0FBUyxDQUFDLFlBQVksRUFBRSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUM7SUFFbkUsQ0FBQztJQUVELFdBQVcsQ0FBQyxRQUFhLEVBQUUsT0FBWTtRQUNuQyxFQUFFLENBQUEsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUEsQ0FBQztZQUNmLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLEVBQUMsS0FBSyxFQUFFLElBQUksRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQ25GLENBQUM7SUFDTCxDQUFDO0lBRUQsWUFBWTtRQUNSLE1BQU0sQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDO0lBQzFCLENBQUM7SUFFRCxlQUFlLENBQUMsT0FBWTtJQUU1QixDQUFDO0NBQ0o7QUFyRUQsOEJBcUVDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgU2VxdWVsaXplIH0gZnJvbSBcInNlcXVlbGl6ZS10eXBlc2NyaXB0XCI7XG5pbXBvcnQge1RyYW5zYWN0aW9ufSBmcm9tIFwiLi4vYXBwL21vZGVsL1RyYW5zYWN0aW9uTW9kZWxcIjtcbmltcG9ydCB7UGF5YWJsZX0gZnJvbSBcIi4uL2FwcC9tb2RlbC9QYXlhYmxlTW9kZWxcIjtcblxuZXhwb3J0IGNsYXNzIEZhY3RvcnlEQntcbiAgICBcbiAgICAvL0RhZG9zIGNvbmV4w6NvIExvY2FsLlxuICAgIHByaXZhdGUgaG9zdCA9IFwiMTcyLjE3LjAuM1wiO1xuICAgIHByaXZhdGUgcG9ydCA9IDMzMDY7XG4gICAgcHJpdmF0ZSBkYXRhYmFzZSA9IFwicHNwXCI7XG4gICAgcHJpdmF0ZSB1c2VyICA9IFwicHNwXCI7XG4gICAgcHJpdmF0ZSBwYXNzd29yZCA9IFwicHNwXCI7XG4gICAgcHJpdmF0ZSBkaWFsZWN0ID0gXCJteXNxbFwiO1xuICAgIHByaXZhdGUgdHlwZVN5bmMgPSBcImFsdGVyXCI7IC8vQWNyZWRpdG8gcXVlIG7Do28gZnVuY2lvbmEgbGVnYWxcblxuICAgIHByaXZhdGUgc2VxdWVsaXplOiBTZXF1ZWxpemU7XG5cbiAgICBjb25zdHJ1Y3Rvcigpe1xuICAgIH1cblxuICAgIGNyZWF0ZUNvbm5lY3Rpb24ob25Db25uZWN0ZWQ6IGFueSwgb25FcnJvcjogYW55KXtcbiAgICAgICAgbGV0IG5vZGVFbnY6c3RyaW5nID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlY7XG4gICAgICAgIGNvbnNvbGUubG9nKFwiTm9kZV9FTlY6IFwiICsgbm9kZUVudik7XG4gICAgICAgIGlmKCFub2RlRW52KXtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiLS0tLS0tLS0tLS0tLS0tQW1iaWVudGUgTG9jYWxcIik7XG4gICAgICAgIH1lbHNlIGlmKG5vZGVFbnYuaW5kZXhPZihcInRlc3RcIikgPiAtMSl7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcIi0tLS0tLS0tLS0tLS0tLUFtYmllbnRlIGRlIFRlc3RlXCIpO1xuICAgICAgICB9ZWxzZSBpZihub2RlRW52LmluZGV4T2YoXCJkZXZlbG9wbWVudFwiKSA+IC0xKXtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiLS0tLS0tLS0tLS0tLS0tQW1iaWVudGUgZGVzZW52b2x2aW1lbnRvIVwiKTtcbiAgICAgICAgfWVsc2UgaWYobm9kZUVudi5pbmRleE9mKFwicHJvZHVjdGlvblwiKSA+IC0xKXtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiLS0tLS0tLS0tLS0tLS0tQW1iaWVudGUgZGUgcHJvZHXDp8OjbyFcIik7XG4gICAgICAgICAgICB0aGlzLmhvc3QgPSBcIm15c3FsNzg1LnVtYmxlci5jb21cIjtcbiAgICAgICAgICAgIHRoaXMucG9ydCA9IDMzMTA7XG4gICAgICAgICAgICB0aGlzLnBhc3N3b3JkID0gXCJXWzVKZjc/eXVqRDUsXCJcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnNlcXVlbGl6ZSA9ICBuZXcgU2VxdWVsaXplKHtcbiAgICAgICAgICAgIGhvc3Q6IHRoaXMuaG9zdCxcbiAgICAgICAgICAgIHBvcnQ6IHRoaXMucG9ydCxcbiAgICAgICAgICAgIGRhdGFiYXNlOiB0aGlzLmRhdGFiYXNlLFxuICAgICAgICAgICAgZGlhbGVjdDogdGhpcy5kaWFsZWN0LFxuICAgICAgICAgICAgdXNlcm5hbWU6IHRoaXMudXNlcixcbiAgICAgICAgICAgIHBhc3N3b3JkOiB0aGlzLnBhc3N3b3JkLFxuICAgICAgICAgICAgcG9vbDoge1xuICAgICAgICAgICAgICAgIG1heDogMjUsXG4gICAgICAgICAgICAgICAgbWluOiAwLFxuICAgICAgICAgICAgICAgIGFjcXVpcmU6IDMwMDAwLFxuICAgICAgICAgICAgICAgIGlkbGU6IDEwMDAwXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgbG9nZ2luZzogdHJ1ZVxuICAgICAgICB9KTtcbiAgICAgICAgLy9BZGljaW9uYW5kbyBvcyBtb2RlbG9zIHF1ZSBzZXLDo28gZXNwZWxoYWRvcyBjb21vIHRhYmVsYXMgbm8gYmFuY28gZGUgZGFkb3MuXG4gICAgICAgIHRoaXMuc2VxdWVsaXplLmFkZE1vZGVscyhbXG4gICAgICAgICAgICBUcmFuc2FjdGlvbixcbiAgICAgICAgICAgIFBheWFibGVcbiAgICAgICAgXSk7XG4gICAgICAgIFxuICAgICAgICB0aGlzLnNlcXVlbGl6ZS5hdXRoZW50aWNhdGUoKS50aGVuKG9uQ29ubmVjdGVkKS5jYXRjaChvbkVycm9yKTtcblxuICAgIH1cblxuICAgIHVwZGF0ZVRhYmxlKG9uVXBkYXRlOiBhbnksIG9uRXJyb3I6IGFueSl7XG4gICAgICAgIGlmKHRoaXMuc2VxdWVsaXplKXtcbiAgICAgICAgICAgIHRoaXMuc2VxdWVsaXplLnN5bmMoe2ZvcmNlOiB0cnVlLCBhbHRlcjogdHJ1ZSB9KS50aGVuKG9uVXBkYXRlKS5jYXRjaChvbkVycm9yKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGdldFNlcXVlbGl6ZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc2VxdWVsaXplO1xuICAgIH1cblxuICAgIGNsb3NlQ29ubmVjdGlvbihvbkNsb3NlOiBhbnkpe1xuICAgICAgICBcbiAgICB9XG59Il19